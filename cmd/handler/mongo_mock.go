// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/handler/mongo.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDbHandler is a mock of DbHandler interface.
type MockDbHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDbHandlerMockRecorder
}

// MockDbHandlerMockRecorder is the mock recorder for MockDbHandler.
type MockDbHandlerMockRecorder struct {
	mock *MockDbHandler
}

// NewMockDbHandler creates a new mock instance.
func NewMockDbHandler(ctrl *gomock.Controller) *MockDbHandler {
	mock := &MockDbHandler{ctrl: ctrl}
	mock.recorder = &MockDbHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbHandler) EXPECT() *MockDbHandlerMockRecorder {
	return m.recorder
}

// AddPoi mocks base method.
func (m *MockDbHandler) AddPoi(poi PoiDbEntry) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoi", poi)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPoi indicates an expected call of AddPoi.
func (mr *MockDbHandlerMockRecorder) AddPoi(poi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoi", reflect.TypeOf((*MockDbHandler)(nil).AddPoi), poi)
}

// DeletePoi mocks base method.
func (m *MockDbHandler) DeletePoi(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePoi", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePoi indicates an expected call of DeletePoi.
func (mr *MockDbHandlerMockRecorder) DeletePoi(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePoi", reflect.TypeOf((*MockDbHandler)(nil).DeletePoi), id)
}

// GetAllPois mocks base method.
func (m *MockDbHandler) GetAllPois() (PoiDbEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPois")
	ret0, _ := ret[0].(PoiDbEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPois indicates an expected call of GetAllPois.
func (mr *MockDbHandlerMockRecorder) GetAllPois() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPois", reflect.TypeOf((*MockDbHandler)(nil).GetAllPois))
}

// GetPoi mocks base method.
func (m *MockDbHandler) GetPoi(id string) (PoiDbEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoi", id)
	ret0, _ := ret[0].(PoiDbEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoi indicates an expected call of GetPoi.
func (mr *MockDbHandlerMockRecorder) GetPoi(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoi", reflect.TypeOf((*MockDbHandler)(nil).GetPoi), id)
}

// SearchByRadius mocks base method.
func (m *MockDbHandler) SearchByRadius(location Location, distanceInMeter uint64) (PoiDbEntries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByRadius", location, distanceInMeter)
	ret0, _ := ret[0].(PoiDbEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByRadius indicates an expected call of SearchByRadius.
func (mr *MockDbHandlerMockRecorder) SearchByRadius(location, distanceInMeter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByRadius", reflect.TypeOf((*MockDbHandler)(nil).SearchByRadius), location, distanceInMeter)
}

// UpdatePoi mocks base method.
func (m *MockDbHandler) UpdatePoi(id string, poi PoiDbEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePoi", id, poi)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePoi indicates an expected call of UpdatePoi.
func (mr *MockDbHandlerMockRecorder) UpdatePoi(id, poi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePoi", reflect.TypeOf((*MockDbHandler)(nil).UpdatePoi), id, poi)
}
